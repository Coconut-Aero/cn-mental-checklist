function F(e){const l=[],a=x(e),m=y(e),t=S(e),f=b(e),N=20,_=21,P=24,w=20;l.push({title:"精神质 P 原始分",result:a,full_mark:N}),l.push({title:"外向性 E 原始分",result:m,full_mark:_}),l.push({title:"神经质 N 原始分",result:t,full_mark:P}),l.push({title:"说谎 L 原始分",result:f,full_mark:w});const n=e[85];if(n===1||n===0){let r="male";n==1&&(r="female");const i=s(a,"P",r),u=s(m,"E",r),c=s(t,"N",r),E=s(f,"L",r),L=o(i),p=o(u),h=o(c),T=k(E);l.push({title:"精神质 P T分",result:i,full_mark:100,status:L}),l.push({title:"外向性 E T分",result:u,full_mark:100,status:p}),l.push({title:"神经质 N T分",result:c,full_mark:100,status:h}),l.push({title:"说谎 L T分",result:E,full_mark:100,status:T}),l.push({title:"气质类型",caption:M(c,u)})}return l}function k(e){return e<50?"答题态度诚实，结果可信":e>=50&&e<60?"答题态度基本正常，结果可参考":"存在掩饰倾向，问卷结果可能失真"}function M(e,l){let a="";l<43.3?a="内向型":l<=56.7?a="中间型":a="外向型";let m="";return e<43.3?m="稳定型":e<=56.7?m="中间型":m="不稳定型",{稳定型:{内向型:"粘液质",中间型:"多血-粘液质",外向型:"多血质"},中间型:{内向型:"粘液-抑郁质",中间型:"多种气质混合型",外向型:"多血-胆汁质"},不稳定型:{内向型:"抑郁质",中间型:"胆汁-抑郁质",外向型:"胆汁质"}}[m][a]}function o(e){return e>=43.3&&e<=56.7?"中间型":e>=38.5&&e<43.3||e>56.7&&e<=61.5?"倾向型":"典型型"}const d=[{raw:24,N:{male:80,female:78}},{raw:23,N:{male:78,female:76}},{raw:22,N:{male:76,female:74}},{raw:21,E:{male:75,female:79},N:{male:74,female:72}},{raw:20,P:{male:93,female:100},E:{male:73,female:77},N:{male:72,female:69},L:{male:62,female:73}},{raw:19,P:{male:90,female:96},E:{male:71,female:74},N:{male:69,female:67},L:{male:60,female:70}},{raw:18,P:{male:87,female:93},E:{male:68,female:72},N:{male:67,female:65},L:{male:58,female:67}},{raw:17,P:{male:84,female:90},E:{male:66,female:69},N:{male:65,female:63},L:{male:56,female:64}},{raw:16,P:{male:81,female:86},E:{male:64,female:67},N:{male:63,female:61},L:{male:55,female:62}},{raw:15,P:{male:78,female:83},E:{male:62,female:65},N:{male:61,female:59},L:{male:53,female:59}},{raw:14,P:{male:75,female:79},E:{male:59,female:62},N:{male:59,female:57},L:{male:51,female:56}},{raw:13,P:{male:72,female:76},E:{male:57,female:60},N:{male:56,female:54},L:{male:50,female:53}},{raw:12,P:{male:68,female:73},E:{male:55,female:57},N:{male:54,female:52},L:{male:48,female:50}},{raw:11,P:{male:65,female:69},E:{male:52,female:55},N:{male:52,female:50},L:{male:46,female:47}},{raw:10,P:{male:62,female:66},E:{male:50,female:52},N:{male:50,female:48},L:{male:44,female:44}},{raw:9,P:{male:59,female:62},E:{male:48,female:50},N:{male:48,female:46},L:{male:43,female:42}},{raw:8,P:{male:56,female:59},E:{male:46,female:48},N:{male:46,female:44},L:{male:41,female:39}},{raw:7,P:{male:51,female:56},E:{male:43,female:45},N:{male:43,female:41},L:{male:39,female:36}},{raw:6,P:{male:50,female:52},E:{male:41,female:43},N:{male:41,female:39},L:{male:37,female:33}},{raw:5,P:{male:47,female:49},E:{male:39,female:41},N:{male:39,female:37},L:{male:35,female:30}},{raw:4,P:{male:44,female:46},E:{male:37,female:38},N:{male:37,female:35},L:{male:34,female:27}},{raw:3,P:{male:41,female:42},E:{male:34,female:35},N:{male:34,female:32},L:{male:32,female:24}},{raw:2,P:{male:37,female:39},E:{male:32,female:33},N:{male:31,female:30},L:{male:30,female:22}},{raw:1,P:{male:35,female:35},E:{male:30,female:31},N:{male:29,female:29},L:{male:29,female:19}},{raw:0,P:{male:31,female:32},E:{male:27,female:28},N:{male:26,female:27},L:{male:27,female:16}}];function s(e,l,a){const m=d.find(t=>t.raw===e);return m?m[l][a]:null}function x(e){const l=[-2,-8,-10,-17,-33,-50,-62,-80,19,23,27,38,41,44,57,58,65,69,73,77];let a=0;return l.forEach(m=>{const t=Math.abs(m)-1,f=e[t];m<0?f===1&&a++:f===0&&a++}),a}function y(e){const l=[1,5,9,13,16,22,29,32,35,40,43,46,49,53,56,61,72,76,85,-26,-37];let a=0;return l.forEach(m=>{const t=Math.abs(m)-1,f=e[t];m<0?f===1&&a++:f===0&&a++}),a}function S(e){const l=[3,6,11,14,18,20,24,28,30,34,36,42,47,51,54,59,63,66,67,70,74,78,82,84];let a=0;return l.forEach(m=>{const t=Math.abs(m)-1,f=e[t];m<0?f===1&&a++:f===0&&a++}),a}function b(e){const l=[12,31,48,68,79,81,-4,-7,-15,-21,-25,-39,-45,-52,-55,-60,-64,-71,-75,-83];let a=0;return l.forEach(m=>{const t=Math.abs(m)-1,f=e[t];m<0?f===1&&a++:f===0&&a++}),a}const g={};export{g as default,F as evaluate};
